-- QUESTION 1: RETRIEVE ALL PRODUCTS WITH THEIR BRAND AND CATEGORY NAMES

SELECT P.PRODUCT_NAME, B.BRAND_NAME, C.CATEGORY_NAME
FROM BRANDS B
INNER JOIN PRODUCTS P
ON B.BRAND_ID = P.BRAND_ID
INNER JOIN CATEGORIES C
ON P.CATEGORY_ID = C.CATEGORY_ID;

-- QUESTION 2: COUNT THE NUMBER OF PRODUCTS IN EACH CATEGORY

SELECT C. CATEGORY_NAME, COUNT(P.PRODUCT_ID) AS PRODUCT_COUNT
FROM PRODUCTS P
INNER JOIN CATEGORIES C
ON P.CATEGORY_ID = C.CATEGORY_ID
GROUP BY C.CATEGORY_NAME
ORDER BY PRODUCT_COUNT DESC;

-- QUESTION 3: FIND THE TOTAL QUANTITY OF PRODUCTS IN STOCK FOR EACH STORE

SELECT ST. STORE_NAME, SUM(SK. QUANTITY) AS PRODUCT_STOCK
FROM STORES ST
INNER JOIN STOCKS SK
ON ST.STORE_ID = SK.STORE_ID
GROUP BY ST. STORE_NAME;

-- QUESTION 4: FIND THE TOP 5 CUSTOMERS WHO HAVE SPENT THE MOST MONEY

WITH CUSTOMER_SPENDING AS (
	SELECT
					C.CUSTOMER_ID,
                    CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS  CUSTOMER_NAME,
                    ROUND(SUM(OI. LIST_PRICE * OI. QUANTITY),2) AS CUSTOMER_SPENT
	FROM CUSTOMERS C
    INNER JOIN ORDERS O 
    ON C.CUSTOMER_ID = O.CUSTOMER_ID
    INNER JOIN ORDER_ITEMS OI
    ON O.ORDER_ID = OI.ORDER_ID
    GROUP BY C.CUSTOMER_ID, CUSTOMER_NAME        
)
SELECT CUSTOMER_ID,
				CUSTOMER_NAME,
                CUSTOMER_SPENT
FROM CUSTOMER_SPENDING
ORDER BY CUSTOMER_SPENT DESC
LIMIT 5;

-- QUESTION 5: RANK PRODUCTS BY THEIR SALES WITHIN EACH CATEGORY

SELECT P. PRODUCT_NAME,
			  C. CATEGORY_NAME,
              ROUND(SUM(OI. LIST_PRICE * OI. QUANTITY),2) AS TOTAL_SALES,
              RANK() OVER(PARTITION BY C.CATEGORY_NAME ORDER BY SUM(OI. LIST_PRICE * OI. QUANTITY) DESC) AS SALES_RANK
FROM CATEGORIES C 
INNER JOIN PRODUCTS P
ON C.CATEGORY_ID = P.CATEGORY_ID
INNER JOIN ORDER_ITEMS OI
ON P.PRODUCT_ID = OI.PRODUCT_ID
GROUP BY C.CATEGORY_NAME, P. PRODUCT_NAME;

-- QUESTION 6: SIMULATE A TRANSACTION WHERE A CUSTOMER PLACES AN ORDER AND UPDATES THE STOCK

START TRANSACTION;

-- INSERTING NEW ORDER IN ORDERS TABLE
INSERT INTO ORDERS () VALUES (1001, '01-02-2024', 1615, 4, '04-02-2024', '03-02-2024', 7, 2);

-- INSERTING NEW ORDER IN ORDER_ITEMS TABLE
INSERT INTO ORDER_ITEMS () VALUES (0.05, 2, 110.50, 1615, 11, 3), (0.2, 3, 120.60, 1615, 12, 4);

-- UPDATE STOCK FOR THE ORDERED PRODUCTS
UPDATE STOCKS
SET QUANTITY = QUANTITY + 2
WHERE STORE_ID = 3 AND PRODUCT_ID = 295;

UPDATE STOCKS
SET QUANTITY = QUANTITY + 8
WHERE STORE_ID = 3 AND PRODUCT_ID = 285;

COMMIT;

ROLLBACK;

-- QUESTION 7: FIND CUSTOMERS WHO HAVE PLACED ORDERS ABOVE THE AVERAGE ORDER VALUES

SELECT C.CUSTOMER_ID,
			  CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS CUSTOMER_NAME,
              O.ORDER_ID,
              OI. QUANTITY * OI. LIST_PRICE AS ORDER_VALUE
FROM CUSTOMERS C
INNER JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
INNER JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
WHERE OI. QUANTITY * OI. LIST_PRICE > (SELECT AVG(OI. QUANTITY * OI. LIST_PRICE) FROM ORDER_ITEMS OI);

-- QUESTION 8: CREATE A VIEW TO SHOW THE TOTAL SALES BY STORE

CREATE VIEW STORE_SALES AS 
				SELECT S.STORE_NAME,
				ROUND(SUM(OI. QUANTITY * OI. LIST_PRICE),2) AS TOTAL_SALES
                FROM STORES S 
                INNER JOIN ORDERS O
                ON S.STORE_ID = O.STORE_ID
                INNER JOIN ORDER_ITEMS OI
                ON O.ORDER_ID = OI.ORDER_ID
                GROUP BY S.STORE_NAME;
                
-- QUERY THE VIEW 
SELECT * FROM STORE_SALES;

-- QUESTION 9: FIND THE CUMULATIVE REVENUE FOR EACH STORE OVER TIME

WITH STORE_REVENUE AS(
SELECT ST. STORE_NAME,
			   O. ORDER_DATE, 
               ROUND(SUM(OI.QUANTITY * OI. LIST_PRICE),2) AS DAILY_REVENUE
               FROM STORES ST 
               INNER JOIN ORDERS O
               ON ST.STORE_ID = O.STORE_ID 
               INNER JOIN ORDER_ITEMS OI
               ON O.ORDER_ID = OI.ORDER_ID
               GROUP BY ST. STORE_NAME, O. ORDER_DATE
)
	SELECT STORE_NAME,
					ORDER_DATE,
					DAILY_REVENUE,
					ROUND(SUM(DAILY_REVENUE) OVER(PARTITION BY STORE_NAME ORDER BY ORDER_DATE DESC),2) AS CUMULATIVE_REVENUE
					FROM STORE_REVENUE;
                    
-- QUESTION 10: CREATE A STORED PROCEDURE TO HANDLE ORDER CANCELLATIONS AND STOCK UPDATES.

DELIMITER // 

CREATE PROCEDURE CANCEL_ORDER (IN ORDER_ID INT)
BEGIN
			START TRANSACTION;
            
            -- UPDATES STOCK FOR EACH ITEM IN THE ORDER 
			UPDATE STOCKS ST
            JOIN ORDER_ITEMS OI 
            ON ST. PRODUCT_ID = OI. PRODUCT_ID
            SET ST. QUANTITY = ST. QUANTITY + OI. QUANTITY
            WHERE OI.ORDER_ID = ORDER_ID;
            
            -- DELETE ORDER ITEMS
            DELETE FROM ORDER_ITEMS
            WHERE ORDER_ID = ORDER_ID;
            
            -- DELETE THE ORDER
            DELETE FROM ORDERS
            WHERE ORDER_ID = ORDER_ID;
            
            COMMIT;
END //

DELIMITER;

-- CALL THE STORED PROCEDURE
CALL CANCEL_ORDER(1001);
            